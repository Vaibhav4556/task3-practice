1) You are given given task is to print whether array is ‘majestic’ or not.A ‘majsetic’ array is an array whose sum of first three number is equal to last three number.

Input Description:
You are given a number ‘n’,Next line contains ‘n’ space separated

Output Description:
Print 1 if array is majestic and 0 if it is not

Sample Input :
7
1 2 3 4 6 0 0
Sample Output :
1

code===>


const readline = require('readline');
const inp = readline.createInterface({
  input: process.stdin
});
const userInput = [];
inp.on("line", (data) => {
 userInput.push(data);
});
inp.on("close", () => {
    
let a=(userInput[0]);
let b =(userInput[1].split(' '));

if ((+b[0])+(+b[1])+(+b[2]) == ((+b[a-1])+(+b[a-2])+(+b[a-3])))
{
    console.log('1');
}
else
{
    console.log('0');
}


});



2) Given the values of a,b and x in the equation ax + b = y. Find the value of y.
Sample Testcase :
INPUT
3 5 2
OUTPUT
11

====>


const readline = require('readline');
const inp = readline.createInterface({
  input: process.stdin
});
const userInput = [];
inp.on("line", (data) => {
 userInput.push(data);
});
inp.on("close", () => {
    
let a=(userInput[0].split(' '));

let y = a[0]*a[2]+(+a[1])
console.log(y);
});


3)Given a number N and array of N integers, print the difference between the indices of smallest and largest number(if there are multiple occurances, consider the first occurance).
Input Size : |N| <= 1000000
Sample Testcase :
INPUT
5
3 5 4 4 7
OUTPUT
4

====>


const readline = require('readline');
const inp = readline.createInterface({
  input: process.stdin
});
const userInput = [];
inp.on("line", (data) => {
 userInput.push(data);
});
inp.on("close", () => {
var a=userInput[0]
var b=userInput[1].split(" ").map(Number)
let min = Math.min(...b)
let max = Math.max(...b)

let index1= b.indexOf(min)
let index2= b.indexOf(max)

console.log(index2-index1)
});


4)
Given a number N print a right angled traingle structure with the starting level as single 1 and every immediate proceeding level with 2 more additional ones than the previous level .Repeat the pattern for N levels.
Input Size : N <= 1000
Sample Testcase :
INPUT
3
OUTPUT
1
1 1 1
1 1 1 1 1


====>

const readline = require('readline');
const inp = readline.createInterface({
  input: process.stdin
});
const userInput = [];
inp.on("line", (data) => {
 userInput.push(data);
});
inp.on("close", () => {
    
let a=parseInt(userInput[0]);
var k = '1'
for (i=0;i<a;i++)
{
    console.log(k)
    k=k+' 1 1'
}
 
});

5)

Given 3 points check whether they lie on the same line.If they lie on the same line print 'yes' Otherwise print 'no'.
Sample Testcase :
INPUT
0 1
0 0
0 2
OUTPUT
yes

=====code===>

const readline = require('readline');
const inp = readline.createInterface({
  input: process.stdin
});
const userInput = [];
inp.on("line", (data) => {
 userInput.push(data);
});
inp.on("close", () => {
    
let a=(userInput[0].split(' '));
let b=(userInput[1].split(' '));
let c=(userInput[2].split(' '));

let m = ((b[0]-a[0])/(b[1]-a[1]));

if(a[0]==m*a[1] && b[0]==m*b[1] && c[0]==m*c[1])
{
    console.log('yes');
}

else
{
    console.log('no')
}
});